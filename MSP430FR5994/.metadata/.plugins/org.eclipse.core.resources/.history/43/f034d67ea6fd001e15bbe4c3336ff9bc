#include <msp430.h>
#include <stdio.h>
#include <stdbool.h>
#include <math.h>
#include "driverlib.h"
#include "memory_util.h"
#include "config.h"

// Define what needs to be in FRAM
#pragma PERSISTENT(params)
float params[NUM_PARAMS] = { 0 };

// ---------- Functions -----------
#pragma CODE_SECTION(update_patient, ".ramfunc")
void update_patient(const float p_values[NUM_TUNING_PARAMS], const int p_names[NUM_TUNING_PARAMS], bool initialization) {

    float patient[NUM_PARAMS];
    readFloatArray(params, patient, NUM_PARAMS);

    int i;
    for(i=0; i<NUM_TUNING_PARAMS; i++){
        patient[p_names[i]] = p_values[i];
    }
    if (initialization){
        patient[CL] = 0.0242 * patient[BW];
        }
    patient[M30] = patient[M1] * patient[HEB] / (1 - patient[HEB]);
    patient[M2] = 3 / 5 * patient[CL] / (patient[HEB] * patient[VI] * patient[BW]);
    patient[M4] = 2 / 5 * patient[CL] / (patient[VI] * patient[BW]);
    patient[IPB] = patient[U2SS] / (patient[M2] + patient[M4] - patient[M1] * patient[M2] / (patient[M1] + patient[M30]));
    patient[ILB] = patient[M2] / (patient[M1] + patient[M30]) * patient[IPB];
    patient[IB] = patient[IPB] / patient[VI];
    patient[KGRI] = patient[KMAX];
    patient[GPB] = patient[GB] * patient[VG];
    patient[EGPB] = patient[KP1] - patient[KP2] * patient[GPB] - patient[KP3] * patient[IB];
    patient[GTB] = 1 / patient[K2] * (patient[FCNS] - patient[EGPB] + patient[K1] * patient[GPB]);
    patient[VM0] = (patient[EGPB] - patient[FCNS]) * (patient[KM0] + patient[GTB]) / patient[GTB];
    patient[ISC1SS] = patient[U2SS] / (patient[KD] + patient[KA1]);
    patient[ISC2SS] = patient[ISC1SS] * patient[KD] / patient[KA2];

    writeFloatArray(params, patient, NUM_PARAMS);
}

#pragma CODE_SECTION(preprocess, ".ramfunc")
// Input: [x_k,y_kminus1,u_k,dt] --> Output: [y_k,v_k]
void preprocess(const float x[STATE_SPACE], const float u[INPUT_SPACE], float y[EXTRA_STATE_SPACE], float v[MODEL_INPUT_SPACE], const float dt) {

    float IIR_dt;
    if (y[INS_TO_INF] <= 0) {
        IIR_dt = u[IIR];
    } else {
        if (u[IIR] >= y[LAST_IIR]) {
            IIR_dt = u[IIR];
        } else {
            IIR_dt = y[LAST_IIR];
        }
    }
    float insulin_to_infuse = y[INS_TO_INF] + u[IIR];
    if (insulin_to_infuse < IIR_dt * dt && dt != 0) {
        IIR_dt = insulin_to_infuse / dt;
        insulin_to_infuse = 0;
    } else {
        insulin_to_infuse = insulin_to_infuse - IIR_dt * dt;
        if (insulin_to_infuse < EPS) {
            insulin_to_infuse = 0;
        }
    }

    float CHO_consumed_rate;
    float eat_rate = fr(&params[EAT_RATE]);
    if (dt == 0) {
        CHO_consumed_rate = 0;
    } else if ((y[CHO_TO_EAT] / dt >= eat_rate) || (u[CHO] / dt >= eat_rate && y[CHO_TO_EAT] == 0)) {
        CHO_consumed_rate = eat_rate;
    } else if ((u[CHO] > 0) && (u[CHO] / dt < eat_rate) && (y[CHO_TO_EAT] == 0)) {
        CHO_consumed_rate = u[CHO] / dt;
    } else {
        CHO_consumed_rate = y[CHO_TO_EAT] / dt;
    }
    float CHO_to_eat = u[CHO] + y[CHO_TO_EAT] - CHO_consumed_rate * dt;

    float new_D;
    if (y[IS_EATING]) {
        new_D = CHO_consumed_rate * dt + y[D];
    } else if (CHO_consumed_rate > 0) {
        new_D = CHO_consumed_rate * dt;
    } else {
        new_D = y[D];
    }

    float lastQsto, is_eating;
    if ((CHO_consumed_rate > 0) && !y[IS_EATING]) {
        is_eating = 1.0;
        lastQsto = x[Q_STO1] + x[Q_STO2];
    } else if ((CHO_consumed_rate == 0) && y[IS_EATING]) {
        is_eating = 0.0;
        lastQsto = y[LAST_Q_STO];
    } else {
        is_eating = y[IS_EATING];
        lastQsto = y[LAST_Q_STO];
    }

    v[CHO_DT] = CHO_consumed_rate;
    v[IIR_DT] = IIR_dt;
    y[INS_TO_INF] = insulin_to_infuse;
    y[LAST_IIR] = IIR_dt;
    y[CHO_TO_EAT] = CHO_to_eat;
    y[D] = new_D;
    y[LAST_Q_STO] = lastQsto;
    y[IS_EATING] = is_eating;
}

#pragma CODE_SECTION(gastro_intestinal_tract, ".ramfunc")
void gastro_intestinal_tract(const float x[STATE_SPACE], const float y[EXTRA_STATE_SPACE], const float v[MODEL_INPUT_SPACE], float dx_dt[STATE_SPACE], const float params[NUM_PARAMS]) {
    dx_dt[Q_STO1] = - params[KGRI] * x[Q_STO1] + v[CHO_DT] * 1000;

    float Q_sto = x[Q_STO1] + x[Q_STO2];
    float D_bar = y[LAST_Q_STO] + y[D] * 1000;
    float kgut;
    if (D_bar > 0) {
        float aa = 5 / (2 * (1 - params[BETA]) * D_bar);
        float cc = 5 / (2 * params[DELTA] * D_bar);
        kgut = params[KMIN] + (params[KMAX] - params[KMIN]) / 2 * (tanh(aa * (Q_sto - params[BETA] * D_bar)) - tanh(cc * (Q_sto - params[DELTA] * D_bar)) + 2);
    } else {
        kgut = params[KMAX];
    }

    dx_dt[Q_STO2] = params[KGRI] * x[Q_STO1] - kgut * x[Q_STO2];

    dx_dt[Q_GUT] = kgut * x[Q_STO2] - params[KABS] * x[Q_GUT];
}

#pragma CODE_SECTION(glucose_subystem, ".ramfunc")
void glucose_subystem(const float x[STATE_SPACE], float dx_dt[STATE_SPACE], const float params[NUM_PARAMS]) {
    float Rat = params[F] * params[KABS] * x[Q_GUT] / params[BW];
    float EGPt = params[KP1] - params[KP2] * x[G_P] - params[KP3] * x[I_D];
    if (EGPt < 0) {
        EGPt = 0;
    }
    float Uiit = params[FCNS];
    float Vmt = params[VM0] + params[VMX] * x[X];
    float Kmt = params[KM0];
    float Uidt = Vmt * x[G_T] / (Kmt + x[G_T]);
    float Et = params[KE1] * (x[G_P] - params[KE2]);
    if (Et < 0) {
        Et = 0;
    }

    dx_dt[G_P] = EGPt + Rat - Uiit - Et - params[K1] * x[G_P] + params[K2] * x[G_T];

    dx_dt[G_T] = -Uidt + params[K1] * x[G_P] - params[K2] * x[G_T];

    dx_dt[G_SC] = -1 / params[TD] * x[G_SC] + 1 / params[TD] * x[G_P];
}

#pragma CODE_SECTION(insulin_infusion_subsystem, ".ramfunc")
void insulin_infusion_subsystem(const float x[STATE_SPACE], const float v[MODEL_INPUT_SPACE], float dx_dt[STATE_SPACE], const float params[NUM_PARAMS]) {
    float insulin = v[IIR_DT] * 6000 / params[BW];

    dx_dt[I_L] = -(params[M1] + params[M30]) * x[I_L] + params[M2] * x[I_P];

    dx_dt[I_SC1] = insulin - (params[KD] + params[KA1]) * x[I_SC1];

    dx_dt[I_SC2] = params[KD] * x[I_SC1] - params[KA2] * x[I_SC2];

    float Rit =  params[KA1] * x[I_SC1] + params[KA2] * x[I_SC2];

    dx_dt[I_P] = -(params[M2] + params[M4]) * x[I_P] + params[M1] * x[I_L] + Rit;
    if (abs(dx_dt[I_P]) <= EPS) {
        dx_dt[I_P] = 0;
    }

    float It = x[I_P] / params[VI];

    dx_dt[X] = params[P2U] * (-x[X] + It - params[IB]);

    dx_dt[I_1] = params[KI] * (It - x[I_1]);

    dx_dt[I_D] = params[KI] * (x[I_1] - x[I_D]);
}

#pragma CODE_SECTION(step, ".ramfunc")
void step(const float x[STATE_SPACE], const float y[EXTRA_STATE_SPACE], const float v[MODEL_INPUT_SPACE], float dx_dt[STATE_SPACE]) {
    float patient[NUM_PARAMS];
    readFloatArray(params, patient, NUM_PARAMS);
    gastro_intestinal_tract(x, y, v, dx_dt, patient);
    glucose_subystem(x, dx_dt, patient);
    insulin_infusion_subsystem(x, v, dx_dt, patient);
}

void init_condition(float x[STATE_SPACE], float y[EXTRA_STATE_SPACE], const float params[NUM_PARAMS]) {
    x[Q_STO1] = 0;
    x[Q_STO2] = 0;
    x[Q_GUT] = 0;
    x[G_P] = params[GPB];
    x[G_T] = params[GTB];
    x[G_SC] = params[GPB];
    x[I_L] = params[ILB];
    x[I_P] = params[IPB];
    x[I_1] = params[IB];
    x[I_D] = params[IB];
    x[X] = 0;
    x[I_SC1] = params[ISC1SS];
    x[I_SC2] = params[ISC2SS];




}
