#include <msp430.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include "driverlib.h"
#include "memory_util.h"


#define STATE_SPACE         13      // ['Qsto1','Qsto2','Qgut','Gp','Gt','Gsc','Il','Ip','I1','Id','X','Isc1','Isc2']
#define EXTRA_STATE_SPACE   6       // ['insulin_to_infuse','last_IIR','CHO_to_eat','D','lastQsto','is_eating']
#define INPUT_SPACE         2       // ['CHO', 'IIR']
#define MODEL_INPUT_SPACE   2       // ['CHO_consumed_rate','IIR_dt']
#define NUM_PARAMS          46
#define NUM_TUNING_PARAMS   46

// ---------- Global state and parameters indices ----------
// State x:
#define Q_STO1      0
#define Q_STO2      1
#define Q_GUT       2
#define G_P         3
#define G_T         4
#define G_SC        5
#define I_L         6
#define I_P         7
#define I_1         8
#define I_D         9
#define X           10
#define I_SC1       11
#define I_SC2       12
// State y:
#define INS_TO_INF  0
#define LAST_IIR    1
#define CHO_TO_EAT  2
#define D           3
#define LAST_Q_STO  4
#define IS_EATING   5
// Input u:
#define CHO         0
#define IIR         1
// Input v:
#define CHO_DT      0
#define IIR_DT      1

// Params:
#define BW          0
#define EAT_RATE    1
#define BASAL       2
#define U2SS        3
#define GB          4
//  Sensor features
#define TD          5
//  Glucose Kinetics
#define VG          6
#define K1          7
#define K2          8
#define GPB         9
//  Insulin Kinetics
#define VI          10
#define HEB         11
#define CL          12
#define M1          13
#define M2          14
#define M30         15
#define M4          16
#define M5          17
#define IPB         18
#define ILB         19
#define IB          20
//  Rate of Appearance
#define KMAX        21
#define KMIN        22
#define KABS        23
#define KGRI        24
#define F           25
#define DELTA       26
#define BETA        27
//  Endogenous Glucose Production
#define KP1         28
#define KP2         29
#define KP3         30
#define KI          31
#define EGPB        32
//  Utilization
#define FCNS        33
#define GTB         34
#define KM0         35
#define VM0         36
#define VMX         37
#define P2U         38
//  Insulin Infusion
#define KD          39
#define KA1         40
#define KA2         41
#define ISC1SS      42
#define ISC2SS      43
//  Renal Excretion
#define KE1         44
#define KE2         45

// Define what needs to be in FRAM
#pragma PERSISTENT(params)
float params[NUM_PARAMS];

// ---------- Functions -----------
#pragma CODE_SECTION(update_patient, ".ramfunc")
void update_patient(const float p_values[NUM_TUNING_PARAMS], const int p_names[NUM_TUNING_PARAMS], bool initialization){
    int i;
    for(i=0; i<NUM_TUNING_PARAMS; i++){
        params[p_names[i]] = p_values[i];
    }
    if (initialization){
            params[CL] = 0.0242 * params[BW];
        }
    params[M30] = params[M1] * params[HEB] / (1 - params[HEB]);
    params[M2] = 3 / 5 * params[CL] / (params[HEB] * params[VI] * params[BW]);
    params[M4] = 2 / 5 * params[CL] / (params[VI] * params[BW]);
    params[IPB] = params[U2SS] / (params[M2] + params[M4] - params[M1] * params[M2] / (params[M1] + params[M30]));
    params[ILB] = params[M2] / (params[M1] + params[M30]) * params[IPB];
    params[IB] = params[IPB] / params[VI];
    params[KGRI] = params[KMAX];
    params[GPB] = params[GB] * params[VG];
    params[EGPB] = params[KP1] - params[KP2] * params[GPB] - params[KP3] * params[IB];
    params[GTB] = 1 / params[K2] * (params[FCNS] - params[EGPB] + params[K1] * params[GPB]);
    params[VM0] = (params[EGPB] - params[FCNS]) * (params[KM0] + params[GTB]) / params[GTB];
    params[ISC1SS] = params[U2SS] / (params[KD] + params[KA1]);
    params[ISC2SS] = params[ISC1SS] * params[KD] / params[KA2];

}

#pragma CODE_SECTION(step, ".ramfunc")
void step(const float x[STATE_SPACE], const float y[EXTRA_STATE_SPACE], const float v[MODEL_INPUT_SPACE], float dx_dt[STATE_SPACE]){



}

#pragma CODE_SECTION(preprocess, ".ramfunc")
// Input: [x_k,y_kminus1,u_k,dt] --> Output: [y_k,v_k]
void preprocess(const float x[STATE_SPACE], const float u[INPUT_SPACE], float y[EXTRA_STATE_SPACE], float v[MODEL_INPUT_SPACE], const float dt){

    float IIR_dt;
    if (y[INS_TO_INF] <= 0) {
        IIR_dt = u[IIR];
    } else {
        if (u[IIR] >= y[LAST_IIR]) {
            IIR_dt = u[IIR];
        } else {
            IIR_dt = y[LAST_IIR];
        }
    }
    float insulin_to_infuse = y[INS_TO_INF] + u[IIR];
    if (insulin_to_infuse < IIR_dt * dt && dt != 0) {
        IIR_dt = insulin_to_infuse / dt;
        insulin_to_infuse = 0;
    } else {
        insulin_to_infuse = insulin_to_infuse - IIR_dt * dt;
        if (insulin_to_infuse < 0) {
            insulin_to_infuse = 0;
        }
    }

    float CHO_consumed_rate;
    if (dt == 0) {
        CHO_consumed_rate = 0;
    } else if ((y[CHO_TO_EAT] / dt >= params[EAT_RATE]) || (u[CHO] / dt >= params[EAT_RATE] && y[CHO_TO_EAT] == 0)) {
        CHO_consumed_rate = params[EAT_RATE];
    } else if ((u[CHO] > 0) && (u[CHO] / dt < params[EAT_RATE]) && (y[CHO_TO_EAT] == 0)) {
        CHO_consumed_rate = u[CHO] / dt;
    } else {
        CHO_consumed_rate = y[CHO_TO_EAT] / dt;
    }
    float CHO_to_eat = u[CHO] + y[CHO_TO_EAT] - CHO_consumed_rate * dt;

    float new_D;
    if (y[IS_EATING]) {
        new_D = CHO_consumed_rate * dt + y[D];
    } else if (CHO_consumed_rate > 0) {
        new_D = CHO_consumed_rate * dt;
    } else {
        new_D = y[D];
    }

    float lastQsto, is_eating;
    if ((CHO_consumed_rate > 0) && (!y[IS_EATING])) {
        is_eating = 1.0;
        lastQsto = x[Q_STO1] + x[Q_STO2];
    } else if ((CHO_consumed_rate == 0) && y[IS_EATING]) {
        is_eating = 0.0;
        lastQsto = y[LAST_Q_STO];
    } else {
        is_eating = y[IS_EATING];
        lastQsto = y[LAST_Q_STO];
    }

//    v = [CHO_consumed_rate, IIR_dt];
    v[CHO_DT] = CHO_consumed_rate;
    v[IIR_DT] = IIR_dt;

    y = [insulin_to_infuse, IIR_dt, CHO_to_eat, new_D, lastQsto, is_eating];
}

#pragma CODE_SECTION(gastro_intestinal_tract, ".ramfunc")
void gastro_intestinal_tract(){



}

#pragma CODE_SECTION(glucose_subystem, ".ramfunc")
void glucose_subystem(){



}

#pragma CODE_SECTION(insulin_infusion_subsystem, ".ramfunc")
void insulin_infusion_subsystem() {



}






